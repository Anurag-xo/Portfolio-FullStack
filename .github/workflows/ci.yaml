name: CI/CD Pipeline for Portfolio

on:
  push:
    branches:
      - production/deploy
    paths-ignore:
      - "README.md"
      - "docs/**"

env:
  # Define the image name for ECR (use your Portfolio ECR repo secret)
  ECR_IMAGE_NAME: ${{ secrets.ECR_REPOSITORY_PORTFOLIO }} # e.g., 123456789012.dkr.ecr.region.amazonaws.com/portfolio-web
  # Define the image name for Docker Hub (if also pushing there)
  DOCKERHUB_IMAGE_NAME: anuragox/portfolio-app

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run Linter
        run: npm run lint

      - name: Build Application
        run: npm run build

      # --- Docker Image Build & Push ---
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # --- AWS ECR Setup ---
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # --- Docker Hub Setup (Optional, remove if not needed) ---
      # Make sure DOCKERHUB_USERNAME and DOCKERHUB_TOKEN secrets are set in GitHub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # --- Extract metadata (tags, labels) for Docker ---
      # Tags images for both ECR and Docker Hub
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          # List both ECR and Docker Hub image names
          images: |
            ${{ env.ECR_IMAGE_NAME }}
            ${{ env.DOCKERHUB_IMAGE_NAME }}
          # Tagging strategy
          tags: |
            # Tag as 'latest' ONLY on the default branch (e.g., main)
            type=raw,value=latest,enable={{is_default_branch}}
            # Tag as 'deploy-latest' on EVERY push to the 'production/deploy' branch
            type=raw,value=deploy-latest,enable=true
            # Tag with the full Git commit SHA prefixed by 'deploy-' for 'production/deploy' branch
            type=sha,prefix=deploy-,format=long

      # --- Build and push Docker image ---
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true # Enable pushing to all specified registries
          tags: ${{ steps.meta.outputs.tags }} # Use the tags generated above
          labels: ${{ steps.meta.outputs.labels }}
          target: runner # Target the 'runner' stage for the production-ready app

  deploy:
    runs-on: ubuntu-latest
    needs: build # This job runs after the 'build' job succeeds
    steps:
      # Checkout code (good practice, even if not directly used here)
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: " " # Disable strict host key checking for simplicity (less secure)

      - name: Deploy Portfolio to EC2
        run: |
          echo '--- Starting Portfolio Deployment on EC2 ---'

          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} "
            set -e # Exit on any error within the SSH session

            echo 'Authenticating Docker to ECR...'
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_IMAGE_NAME }}

            # --- FIXED: Pull the specific 'deploy-latest' tag built for this branch ---
            echo 'Pulling Portfolio Docker image tagged deploy-latest (specific to this branch)...'
            docker pull ${{ env.ECR_IMAGE_NAME }}:deploy-latest

            echo 'Navigating to Portfolio directory...'
            cd /home/ec2-user/Portfolio-FullStack || { echo 'Failed to change to Portfolio directory'; exit 1; }

            echo 'Creating/updating docker-compose configuration for Portfolio (using deploy-latest tag)...'
            cat > docker-compose.portfolio.yml <<EOF
            version: '3.8'
            services:
              portfolio-web:
                image: ${{ env.ECR_IMAGE_NAME }}:deploy-latest
                ports:
                  - "3000:3000" 
                environment:
                  NODE_ENV: production
                  NEXT_TELEMETRY_DISABLED: 1
                restart: unless-stopped
            EOF

            echo 'Stopping existing Portfolio containers (if any)...'
            docker-compose -f docker-compose.portfolio.yml down

            echo 'Starting Portfolio containers...'
            docker-compose -f docker-compose.portfolio.yml up -d

            echo '--- Portfolio Deployment to EC2 Completed ---'
          "

          if [ $? -eq 0 ]; then
            echo "Portfolio Deployment successful!"
            echo "Access your Portfolio at http://${{ secrets.EC2_PUBLIC_IP }}:3000"
          else
            echo "Portfolio Deployment failed!"
            exit 1
          fi
