name: CI/CD Pipeline for Portfolio

on:
  push:
    branches:
      - production/deploy
    paths-ignore:
      - "README.md"
      - "docs/**"

env:
  # Define the image name for ECR (use your new Portfolio ECR repo)
  IMAGE_NAME: ${{ secrets.ECR_REPOSITORY_PORTFOLIO }} # Make sure this secret exists

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run Linter
        run: npm run lint

      - name: Build Application
        run: npm run build

      # --- Docker Image Build & Push ---
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }} # Use ECR image name
          # Tag with 'latest' and Git SHA
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=,format=long

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true # Enable pushing
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: runner # Target the final stage that contains the production-ready app
          # Pass build arguments if needed (e.g., NEXT_PUBLIC_* vars set in GitHub Secrets)
          # build-args: |
          #   NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}

  deploy:
    runs-on: ubuntu-latest
    needs: build # This job runs after the 'build' job succeeds
    steps:
      - name: Checkout code (needed for the docker-compose.yml file potentially)
        uses: actions/checkout@v4

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: " " # Disable strict host key checking for simplicity (less secure)

      - name: Deploy Portfolio to EC2
        run: |
          echo '--- Starting Portfolio Deployment on EC2 ---'

          # SSH into the EC2 instance and execute deployment commands
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} "
            set -e # Exit on any error within the SSH session

            echo 'Authenticating Docker to ECR...'
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_PORTFOLIO }}

            echo 'Pulling latest Portfolio Docker image (using latest tag)...'
            docker pull ${{ secrets.ECR_REPOSITORY_PORTFOLIO }}:latest

            echo 'Navigating to Portfolio directory...'
            cd /home/ec2-user/Portfolio-FullStack || { echo 'Failed to change to Portfolio directory'; exit 1; }

            # --- Deployment using docker-compose.yml from the repo ---
            # Ensure the docker-compose.yml file exists in the repo at the correct path
            # relative to the workflow. Adjust path if needed.
            # This assumes you have committed the docker-compose.portfolio.yml or similar
            # to your repo, or you are using the main docker-compose.yml for this.
            # Let's assume you create a specific one: docker-compose.portfolio.yml
            # and copy it to the server or create it dynamically.
            # For this example, let's create it dynamically on the server based on the latest image.

            echo 'Creating/updating docker-compose configuration for Portfolio...'
            cat > docker-compose.portfolio.yml <<EOF
            version: '3.8'
            services:
              portfolio-web:
                image: ${{ secrets.ECR_REPOSITORY_PORTFOLIO }}:latest # Use the latest image pulled
                ports:
                  - "3000:3000" # Expose on host port 3000
                environment:
                  NODE_ENV: production
                  NEXT_TELEMETRY_DISABLED: 1
                  # Add other necessary environment variables here
                  # Example:
                  # RESEND_API_KEY: \${RESEND_API_KEY} # Pass via secrets if needed on EC2
                restart: unless-stopped
                healthcheck:
                  test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/healthz || exit 1"] # Adjust health check path if needed
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 5s
            EOF

            echo 'Stopping existing Portfolio containers (if any)...'
            docker-compose -f docker-compose.portfolio.yml down

            echo 'Starting Portfolio containers...'
            docker-compose -f docker-compose.portfolio.yml up -d

            echo '--- Portfolio Deployment to EC2 Completed ---'
          "

          # Check the exit status of the SSH command
          if [ $? -eq 0 ]; then
            echo "Portfolio Deployment successful!"
            echo "Access your Portfolio at http://${{ secrets.EC2_PUBLIC_IP }}:3000"
          else
            echo "Portfolio Deployment failed!"
            exit 1
          fi
